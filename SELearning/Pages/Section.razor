@page "/section/{SectionId}"

@using Core.Section
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.Content
@using SELearning.Shared.Content;

@inject HttpClient _httpClient
@inject ToastService _toastService

<div class="container">
    <div class="get-quote">
        <div class="row">
            <div class="col-sm-10 col-12">
                <h1 class="left-block float-left">@_section.Title</h1>
            </div>
            <div class="col-sm-2 col-12">
                <a class="btn btn-primary right-block float-right" href="CreateContent" role="button">Add Content</a>
            </div>
        </div>
    </div>
</div>

<ContentList RetrieveContent="@RetrieveContentInSection"/>

@code{

    [Parameter]
    public string SectionId { get; set; }

    private SectionDTO _section = new();

    protected override async void OnInitialized()
    {
        await RetrieveSection();
    }

    private async Task<List<ContentDTO>> RetrieveContentInSection()
    {
        List<ContentDTO> contents = new();

        try
        {
            var content = await _httpClient.GetFromJsonAsync<IEnumerable<ContentDTO>>($"Section/{SectionId}/Content");
            if (content == null)
            {
                _toastService.AddToast(new ToastNotification("No Content Found", ToastType.Warning));
                return contents;
            }

            contents = content.ToList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return contents;
    }

    private async Task RetrieveSection()
    {
        try
        {
            var section = await _httpClient.GetFromJsonAsync<SectionDTO>($"Section/{SectionId}");
            _section = section;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
