@using Core.Section
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

@page "/CreateSection"

@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject ToastService _toastService
@inject NavigationManager _navManager

<h1>Create Section</h1>

<EditForm class="col-lg-12" Model="@SectionDto" OnValidSubmit="@CreateSectionAsync">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" @bind-Value="SectionDto.Title" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="desc">Description:</label>
        <InputTextArea id="desc" @bind-Value="SectionDto.Description" rows="3" class="form-control"/>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Create Section</button>
    </div>
</EditForm>

@code{
    private SectionCreateDTO SectionDto { get; } = new();

    private async Task CreateSectionAsync()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("Section", SectionDto);

            if (response.IsSuccessStatusCode)
            {
                _toastService.AddToast(new ToastNotification("The Section was succesfully posted!", ToastType.Success, 10000));
                _navManager.NavigateTo("/sections");
            }
            else if (response.StatusCode == HttpStatusCode.Forbidden)
            {
                _toastService.AddToast(ToastNotification.CreateUnauthorized("create sections"));
            }
            else
            {
                _toastService.AddToast(new ToastNotification("The Section could not be posted", ToastType.Error, 10000));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _toastService.AddToast(ToastNotification.CreateLoggedError(exception.ToString()));
        }
    }

}
