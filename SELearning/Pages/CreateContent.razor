@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.Content

@page "/CreateContent"

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>Create Content</h1>

 <EditForm class="col-lg-12" Model="@Content" OnValidSubmit="@CreateContentAsync">
    <div class="form-group">
      <label for="title">Title:</label>
      <InputText id="title" @bind-Value="Content.Title" class="form-control" />
    </div>
    <div class="form-group">
      <label for="desc">Description:</label>
      <InputTextArea id="desc" @bind-Value="Content.Description" rows="3" class="form-control"/>
    </div>
    <div class="form-group">
      <label for="videoLink">Video link:</label>
      <InputText id="videoLink" @bind-Value="Content.VideoLink" class="form-control"/>
    </div>
    <div class="form-group">
      <InputSelect class="form-control" @bind-Value="Content.SectionId">
        @foreach (var sec in sections)
        {
          <option value="@sec.Id">@sec.Title</option>        
        }
      </InputSelect>
    </div>
    <div class="form-group">
      <button class="btn btn-primary" type="submit">Create Content</button>
    </div>
</EditForm> 

@if (isPosted)
{
  <div class="alert alert-success" role="alert">
    The content was succesfully posted!
  </div>
}

@if (isNotPosted)
{
  <div class="alert alert-danger" role="alert">
  The content could not be posted
  </div>
}

@code{
  protected override async Task OnInitializedAsync()
  {
    await this.RetrieveSections();
  }
  record ContentUserDTO
  {
    public string Title{get; set;}
    public string Description{get; set;}
    public string VideoLink{get; set;}
    public string SectionId {get; set;}
  }
  
  private SectionDto[] sections = {}; 
  private ContentUserDTO Content { get; set; } = new();
  private bool isPosted = false;
  private bool isNotPosted = false;

  private async Task CreateContentAsync()
  {
    try
    {
      var response = await Http.PostAsJsonAsync<ContentUserDTO>("Content", Content);
        
      if(response.IsSuccessStatusCode)
      {
        isPosted = true;
      }
      else
      {
        isNotPosted = true;
      }
    } 
    catch(AccessTokenNotAvailableException exception)
    {
      exception.Redirect();
    } 
    catch(Exception exception)
    {
      await this.Alert(exception);
    }
  }

  private async Task Alert(Exception exception) {
    await JsRuntime.InvokeVoidAsync("alert", exception.ToString());
    System.Console.WriteLine(exception);
  }
  protected async Task RetrieveSections()
  {
    try
    {
      sections = await Http.GetFromJsonAsync<SectionDto[]>("Section");
    }
    catch (AccessTokenNotAvailableException exception)
    {
      exception.Redirect();
    }
  }
}