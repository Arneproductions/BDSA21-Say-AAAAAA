@page "/CreateContent"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.Content
@using SELearning.Core.Section
@using System.Net;

@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject ToastService _toastService;
@inject NavigationManager _navManager

<h1>Create Content</h1>
<EditForm class="col-lg-12" Model="@Content" OnValidSubmit="@CreateContentAsync">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" @bind-Value="Content.Title" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="desc">Description:</label>
        <InputTextArea id="desc" @bind-Value="Content.Description" rows="3" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="videoLink">Video link:</label>
        <InputText id="videoLink" @bind-Value="Content.VideoLink" class="form-control"/>
    </div>
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="Content.SectionId">
            <option value="">Select section...</option>
            @foreach (var sec in _sections)
            {
                <option value="@sec.Id">@sec.Title</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Create Content</button>
    </div>
</EditForm>

@code
{
    private SectionDTO[] _sections = {};
    private ContentUserDTO Content { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RetrieveSections();
    }

    private async Task CreateContentAsync()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("Content", Content);

            if (response.IsSuccessStatusCode)
            {
                _toastService.AddToast(new ToastNotification("The Content was succesfully posted!", ToastType.Success, 10000));

                var content = await response.Content.ReadFromJsonAsync<ContentDTO>();
                _navManager.NavigateTo($"/content/{content!.Id}");
            }
            else if (response.StatusCode == HttpStatusCode.Forbidden)
            {
                _toastService.AddToast(ToastNotification.CreateUnauthorized("create content"));
            }
            else
            {
                _toastService.AddToast(new ToastNotification("The Content could not be posted", ToastType.Error, 10000));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            _toastService.AddToast(ToastNotification.CreateNoAccessToastNotification());
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _toastService.AddToast(ToastNotification.CreateLoggedError(exception.ToString()));
        }
    }

    private async Task RetrieveSections()
    {
        try
        {
            _sections = await _httpClient.GetFromJsonAsync<SectionDTO[]>("Section");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            _toastService.AddToast(ToastNotification.CreateNoAccessToastNotification());
            exception.Redirect();
        }
    }
}
