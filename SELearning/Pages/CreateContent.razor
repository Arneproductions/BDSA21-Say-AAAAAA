@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.Content
@using System.ComponentModel.DataAnnotations
@using SELearning.Core.Section
@using System.Net;

@page "/CreateContent"

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject ToastService toasts;

<h1>Create Content</h1>
<EditForm class="col-lg-12" Model="@Content" OnValidSubmit="@CreateContentAsync">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" @bind-Value="Content.Title" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="desc">Description:</label>
        <InputTextArea id="desc" @bind-Value="Content.Description" rows="3" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="videoLink">Video link:</label>
        <InputText id="videoLink" @bind-Value="Content.VideoLink" class="form-control"/>
    </div>
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="Content.SectionId">
            <option value="">Select section...</option>
            @foreach (var sec in sections)
            {
                <option value="@sec.Id">@sec.Title</option>        
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Create Content</button>
    </div>
</EditForm> 

@if (isPosted != null)
{
    if ((bool) isPosted)
    {
        <div class="alert alert-success" role="alert">
            The content was succesfully posted!
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            The content could not be posted!
        </div>
    }
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        await this.RetrieveSections();
    }
 
    private SectionDTO[] sections = {}; 
    private ContentUserDTO Content { get; set; } = new();
    private bool? isPosted = null;

    private async Task CreateContentAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<ContentUserDTO>("Content", Content);
            isPosted = response.IsSuccessStatusCode;

            if (response.StatusCode == HttpStatusCode.Forbidden)
            {
                toasts.AddToast(ToastNotification.CreateUnauthorized("create content"));
                return;
            }
        } 
        catch(AccessTokenNotAvailableException exception)
        {
            toasts.AddToast(ToastNotification.CreateNoAccessToastNotification());
            exception.Redirect();
        } 
        catch(Exception exception)
        {
            toasts.AddToast(ToastNotification.CreateGenericErrorToastNotification(exception.Message));
            await this.Alert(exception);
        }
    }

    private async Task Alert(Exception exception)
    {
        await JsRuntime.InvokeVoidAsync("alert", exception.ToString());
        System.Console.WriteLine(exception);
    }

    protected async Task RetrieveSections()
    {
        try
        {
            sections = await Http.GetFromJsonAsync<SectionDTO[]>("Section");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            toasts.AddToast(ToastNotification.CreateNoAccessToastNotification());
            exception.Redirect();
        }
    }
}
