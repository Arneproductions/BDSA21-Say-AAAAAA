@page "/content/{contentId:int}"

@using SELearning.Core.Content;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

@attribute [Authorize]
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject ToastService _toastService;

<div>
    @if (_content != null)
    {
        <section class="video-wrapper">
            <iframe width="560" height="315" src="@_content.VideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </section>

        <section class="about-section">
            <div class="header-section">
                <h1>@_content.Title</h1>
                <p>@_content.Author.Name</p>
            </div>
            <div class="rating-container">
                <div role="button" class="arrow-up" @onclick="OnUpvoteClicked"></div>
                <span class="rating">@_content.Rating</span>
                <div role="button"></div>
                <div role="button" class="arrow-down" @onclick="OnDownvoteClicked"></div>
            </div>
        </section>
        <p class="description">@_content.Description</p>

        <SELearning.Shared.Comment.CommentSection ContentId="@ContentId"/>
    }
    else
    {
        <p>Loading</p>
    }
</div>

@code {

    [Parameter]
    public int ContentId { get; set; }

    private ContentDTO _content;

    protected override async void OnInitialized()
    {
        await GetContent();
    }

    private async Task GetContent()
    {
        try
        {
            _content = await _httpClient.GetFromJsonAsync<ContentDTO>($"Content/{ContentId}");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _toastService.AddToast(ToastNotification.CreateLoggedError(exception.ToString()));
        }
    }

    private async void OnUpvoteClicked()
    {
        try
        {
            var responseMessage = await _httpClient.PutAsync($"Content/{ContentId}/upvote", null);

            if (responseMessage.StatusCode == HttpStatusCode.Forbidden)
            {
                _toastService.AddToast(ToastNotification.CreateUnauthorized("rate"));
                return;
            }

            _content.Rating += 1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _toastService.AddToast(ToastNotification.CreateLoggedError(exception.ToString()));
        }
    }

    private async void OnDownvoteClicked()
    {
        try
        {
            var responseMessage = await _httpClient.PutAsync($"Content/{ContentId}/downvote", null);

            if (responseMessage.StatusCode == HttpStatusCode.Forbidden)
            {
                _toastService.AddToast(ToastNotification.CreateUnauthorized("rate"));
                return;
            }

            _content.Rating -= 1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            _toastService.AddToast(ToastNotification.CreateLoggedError(exception.ToString()));
        }
    }

}
