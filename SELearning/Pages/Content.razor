@page "/content/{contentId:int}"

@using SELearning.Core.Content;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div>
@if (_content != null) {
    <section class="video-wrapper">
        <iframe width="560" height="315" src="@_content.VideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </section>

    <section class="about-section">
        <div class="header-section">
            <h1>@_content.Title</h1>
            <p>@_content.Author.Name</p>
        </div>
        <div class="rating-container">
            <div
                role="button"
                class="@((_rateAmount > 0 ? "active" : "") + " arrow-up")"
                @onclick="OnUpvoteClicked"
            ></div>
            <span class="rating">@_content.Rating</span>
            <div role="button"  ></div>
            <div
                role="button"
                class="@((_rateAmount < 0 ? "active" : "") + " arrow-down")"
                @onclick="OnDownvoteClicked"
            ></div>
        </div>
    </section>
    <p class="description">@_content.Description</p>

    <SELearning.Shared.Comment.CommentSection ContentId="@ContentId" />
} else {
    <p>Loading</p>
}
</div>

@code {
    [Parameter]
    public int ContentId { get; set; }

    private ContentDto _content;

    private int _rateAmount = 0;

    protected override async void OnInitialized() {
        await this.GetContent();
    }

    protected async Task GetContent() {
        try
        {
            _content = await Http.GetFromJsonAsync<ContentDto>($"Content/{this.ContentId}");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    protected async void OnUpvoteClicked() {
        try
        {
            await Http.PutAsync($"Content/{this.ContentId}/upvote", null);
            _content.Rating += 1;
            _rateAmount = _rateAmount > 0 ? 0 : 1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    protected async void OnDownvoteClicked() {
        try
        {
            await Http.PutAsync($"Content/{this.ContentId}/downvote", null);
            _content.Rating -= 1;
            _rateAmount = _rateAmount < 0 ? 0 : -1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    private async Task Alert(Exception exception) {
        await JsRuntime.InvokeVoidAsync("alert", exception.ToString());
        System.Console.WriteLine(exception);
    }
}
