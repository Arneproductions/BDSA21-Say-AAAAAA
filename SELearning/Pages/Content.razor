@page "/content/{contentId}"

@using SELearning.Core
@using SELearning.Core.Comment;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JsRuntime


<section class="video-wrapper">
    <iframe width="560" height="315" src="@_content.VideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</section>

<section class="about-section">
    <div class="header-section">
        <h1>@_content.Title</h1>
        <p>@_content.Author | @_content.CreatedAt.ToString("dddd, dd MMMM yyyy")</p>
    </div>
    <div class="rating-container">
        <div
            role="button"
            class="@((_rateAmount > 0 ? "active" : "") + " arrow-up")"
            @onclick="OnUpvoteClicked"
        ></div>
        <span class="rating">@_content.Rating</span>
        <div role="button"  ></div>
        <div
            role="button"
            class="@((_rateAmount ? "active" : "") + " arrow-down")"
            @onclick="OnDownvoteClicked"
        ></div>
    </div>
</section>
<p class="description">@_content.Description</p>

<SELearning.Shared.Comment.CommentSection ContentId="@ContentId" />

@code {
    [Parameter]
    public string ContentId { get; set; }

    private ContentDTO _content;

    private int _rateAmount = 0;

    protected override async void OnInitialized() {
        await this.GetContent();
    }

    protected async Task GetContent() {
        try
        {
            _content = await Http.GetFromJsonAsync<ContentDTO>($"Content/{this.ContentId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    protected async void OnUpvoteClicked() {
        try
        {
            await Http.PutAsync($"Content/{this.ContentId}/upvote");
            _content.Rating += 1;
            _rateAmount = _rateAmount > 0 ? 0 : 1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    protected async void OnDownvoteClicked() {
        try
        {
            await Http.PutAsync($"Content/{this.ContentId}/downvote");
            _content.Rating -= 1;
            _rateAmount = _rateAmount < 0 ? 0 : -1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    private async Task Alert(Exception exception) {
        await JsRuntime.InvokeVoidAsync("alert", exception.ToString());
        System.Console.WriteLine(exception);
    }
}
