@using SELearning.Core.Comment;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<section class="comment-list container-fluid"> <!-- NOTE: I am not sure the it is necessary to have container fluid... but i am using it just to be sure that this 'component' looks good if no container is supplied -->
    <div class="row">
        <!-- Comment section header-->
        <h3>Comments</h3>
    </div>
    <div class="row">
        <!-- List of comments -->
        @foreach(CommentDetailsDTO comment in _comments)
        {
            <CommentTile Comment="@comment" OnCommentDeleted="@OnCommentDeleted"/>
        }
    </div>
    <div class="row">
        <!-- Comment section -->
        <EditForm class="col-lg-12" Model="@_comment" OnValidSubmit="@PostComment">
            <div class="form-group">
                <InputTextArea @bind-Value="_comment.Text" class="form-control" rows="3"/>
            </div>
            <div class="form-group col-lg-3 col-lg-offset-9">
                <button class="btn btn-primary" type="submit">Post comment</button>
            </div>
        </EditForm>
    </div>
</section>

@code{
    [Parameter]
    public int ContentId { get; set; }

    private Comment _comment = new();

    private IList<CommentDetailsDTO> _comments = new List<CommentDetailsDTO>();
    
    protected override async void OnInitialized()
    {
        await this.GetComments();
    } 

    private async Task GetComments()
    {
        try
        {
            _comments = await Http.GetFromJsonAsync<List<CommentDetailsDTO>>($"Comment/content/{this.ContentId}");
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    private async Task PostComment()
    {
        try
        {
            using var response = await Http.PostAsJsonAsync("Comment", new CommentCreateDTO(
                _comment.Author, // TODO: Get the author from somewhere
                _comment.Text,
                this.ContentId
            ));
            var comment = await response.Content.ReadFromJsonAsync<CommentDetailsDTO>(); 
            _comments.Add(comment);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            await this.Alert(exception);
        }
    }

    private async Task OnCommentDeleted(CommentDetailsDTO comment)
    {
        _comments.Remove(comment);
    }

    private async Task Alert(Exception exception) {
        await JsRuntime.InvokeVoidAsync("alert", exception.ToString());
        System.Console.WriteLine(exception);
    }
}
