@using Core.Section
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.Content

@inject HttpClient Http

<div class="container">
    <div class="get-quote">
        <div class="row">
            <div class="col-sm-10 col-12">
                <h1 class="left-block float-left">@_section.Title</h1>
            </div>
            <div class="col-sm-2 col-12">
                <a class="btn btn-primary right-block float-right" href="createcontent" role="button">Add Content</a>
            </div>
        </div>
    </div>
</div>

<section class="comment-list container-fluid"> <!-- NOTE: I am not sure the it is necessary to have container fluid... but i am using it just to be sure that this 'component' looks good if no container is supplied -->
    <div class="row">
        <!-- List of comments -->
        @foreach(var content in _contents)
        {
            <ContentTile content="@content" OnContentDeleted="@OnContentDeleted"/>
        }
    </div>
</section>

@code{
    [Parameter]
    public string SectionId { get; set; }

    private SectionDTO _section = new();

    private List<ContentDTO> _contents = new();

    protected async override void OnInitialized()
    {
        await RetrieveContentInSection();
    }

    private void OnContentDeleted(ContentDTO content)
    {
        System.Console.WriteLine($"Comment from {content.Author} is deleted!");
        _contents.Remove(content);
        StateHasChanged();
    }

    protected async Task RetrieveContentInSection()
    {
        try
        {
            var content = await Http.GetFromJsonAsync<IEnumerable<ContentDTO>>($"Section/{SectionId}/Content");
            _contents = content.ToList();
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task RetrieveSection()
    {
        try
        {
            var section = await Http.GetFromJsonAsync<SectionDTO>($"Section/{SectionId}");
            _section = section;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}