@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SELearning.Core.User

@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject SignOutSessionStateManager _signOutManager
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity!.Name! | Current Credibility: @_userCredibility.currentCredibility

        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{

    private UserCredibiityDTO _userCredibility = new(0);

    protected override async void OnInitialized()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity!.IsAuthenticated) return;

        _userCredibility = await _httpClient.GetFromJsonAsync<UserCredibiityDTO>("User/Me/Credibility");
        StateHasChanged();
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        await _signOutManager.SetSignOutState();
        _navigationManager.NavigateTo("authentication/logout");
    }

}
